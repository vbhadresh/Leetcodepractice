package Goldmansachs.TwoSum;

import java.util.HashMap;
import java.util.Map;

/*

define a map and compliment
approach: find the difference bw target and loop of elements in an array. If the difference (complement) present in the map then return its indices,
otherwise add that num and its index to map

Here return int[] should have index1 less than index2 .
note: index starts from 1 not 0
 */
public class TwoSum {

    public static void main(String[] args) {
        twoSUm(new int[]{2,7,11,15},9);
    }

    public static int[] twoSUm(int[] nums, int target){
        Map<Integer, Integer> map = new HashMap<>();
        int complement;
        int[] result ={};

        for(int i=0;i<nums.length;i++){
            int num= nums[i];
            complement=target-num;

            if(map.containsKey(complement)){
                return new int[]{i,map.get(complement)};
            }
            map.put(num,i);
        }
        return result;
    }
}
